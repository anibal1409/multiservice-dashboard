{"version":3,"file":"http-form-data-client.mjs","sources":["../../../projects/http-form-data-client/src/lib/class/blob-vm.ts","../../../projects/http-form-data-client/src/lib/interfaces/options-token.ts","../../../projects/http-form-data-client/src/lib/utils/json-2-form-data.ts","../../../projects/http-form-data-client/src/lib/http-form-data-client.service.ts","../../../projects/http-form-data-client/src/lib/http-form-data-client.module.ts","../../../projects/http-form-data-client/src/http-form-data-client.ts"],"sourcesContent":["export class BlobVM {\n  blob: Blob;\n  filename: string;\n\n  constructor(blob: Blob, filename: string) {\n    this.blob = blob;\n    this.filename = filename;\n  }\n}","import { InjectionToken } from '@angular/core';\n\nexport const HTTP_FORM_DATA_OPTIONS = new InjectionToken(\n  'HTTP_FORM_DATA_OPTIONS',\n);\n","import { BlobVM } from '../class';\nimport { FormDataParserOptions } from '../interfaces';\n\n/**\n * Convierte un objeto en FormData\n * @param obj Objeto Json\n * @returns Objeto FormData con las propiedades del objeto JSON\n */\n\n\nexport function json2FormData<T = any>(\n  obj: T,\n  options: FormDataParserOptions = { blobPrefix: 'file' },\n): FormData {\n  const formData = new FormData();\n  Object.keys(obj as any).forEach((k) => {\n    const value = (obj as any)[k];\n    const blobKey = options.blobPrefix ? `${options.blobPrefix}_${k}` : k;\n    if (value instanceof Blob ) {\n      formData.append(blobKey, value);\n    } else if (value instanceof BlobVM) {\n      formData.append(blobKey, value.blob, value.filename);\n    } else if (Array.isArray(value) && value.length) {\n      value.forEach((val) => {\n        if (val instanceof Blob) {\n          formData.append(blobKey, val);\n        } else {\n          formData.append(`${k}[]`, JSON.stringify(val));\n        }\n      });\n    } else if ( typeof value === 'string') {\n      formData.append(k, value);\n    } else {\n      formData.append(k, JSON.stringify(value));\n    }\n  });\n  return formData;\n}\n","import { HttpClient } from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  Optional,\n} from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ClientOptions,\n  FormDataParserOptions,\n  HTTP_FORM_DATA_OPTIONS,\n  HttpOptions,\n} from './interfaces';\nimport { json2FormData } from './utils';\n\n@Injectable()\nexport class HttpFormDataClientService {\n  private httpOptions: HttpOptions = {};\n  private formDataParserOptions: FormDataParserOptions = {\n    blobPrefix: 'file',\n  };\n\n  constructor(\n    private httpClient: HttpClient,\n    @Optional()\n    @Inject(HTTP_FORM_DATA_OPTIONS)\n    private clientOptions: ClientOptions = {},\n  ) {\n    this.httpOptions = clientOptions?.httpOptions || {};\n    this.formDataParserOptions =\n      clientOptions?.formDataParserOptions || this.formDataParserOptions;\n  }\n\n  private buildUrl(url: string): string {\n    return `${this.clientOptions.basePath}/${url}`;\n  }\n\n  post<T, R>(\n    url: string,\n    obj: T,\n    httpOptions: HttpOptions = {},\n  ): Observable<R> {\n    return this.httpClient.post<R>(\n      this.buildUrl(url),\n      json2FormData(obj, this.formDataParserOptions),\n      {\n        ...this.httpOptions,\n        ...httpOptions,\n      },\n    );\n  }\n\n  put<T, R>(url: string, obj: T, httpOptions: HttpOptions = {}): Observable<R> {\n    return this.httpClient.put<R>(\n      this.buildUrl(url),\n      json2FormData(obj, this.formDataParserOptions),\n      {\n        ...this.httpOptions,\n        ...httpOptions,\n      },\n    );\n  }\n\n  patch<T, R>(\n    url: string,\n    obj: T,\n    httpOptions: HttpOptions = {},\n  ): Observable<R> {\n    return this.httpClient.patch<R>(\n      this.buildUrl(url),\n      json2FormData(obj, this.formDataParserOptions),\n      {\n        ...this.httpOptions,\n        ...httpOptions,\n      },\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  ModuleWithProviders,\n  NgModule,\n} from '@angular/core';\n\nimport { HttpFormDataClientService } from './http-form-data-client.service';\nimport {\n  ClientOptions,\n  HTTP_FORM_DATA_OPTIONS,\n} from './interfaces';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n})\nexport class HttpFormDataClientModule {\n  static forRoot(\n    options: ClientOptions = {\n      basePath: 'http://localhost:3333/api',\n    },\n  ): ModuleWithProviders<HttpFormDataClientModule> {\n    return {\n      ngModule: HttpFormDataClientModule,\n      providers: [\n        HttpFormDataClientService,\n        {\n          provide: HTTP_FORM_DATA_OPTIONS,\n          useValue: options,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}