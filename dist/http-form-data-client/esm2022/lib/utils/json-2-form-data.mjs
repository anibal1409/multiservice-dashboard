import { BlobVM } from '../class';
/**
 * Convierte un objeto en FormData
 * @param obj Objeto Json
 * @returns Objeto FormData con las propiedades del objeto JSON
 */
export function json2FormData(obj, options = { blobPrefix: 'file' }) {
    const formData = new FormData();
    Object.keys(obj).forEach((k) => {
        const value = obj[k];
        const blobKey = options.blobPrefix ? `${options.blobPrefix}_${k}` : k;
        if (value instanceof Blob) {
            formData.append(blobKey, value);
        }
        else if (value instanceof BlobVM) {
            formData.append(blobKey, value.blob, value.filename);
        }
        else if (Array.isArray(value) && value.length) {
            value.forEach((val) => {
                if (val instanceof Blob) {
                    formData.append(blobKey, val);
                }
                else {
                    formData.append(`${k}[]`, JSON.stringify(val));
                }
            });
        }
        else if (typeof value === 'string') {
            formData.append(k, value);
        }
        else {
            formData.append(k, JSON.stringify(value));
        }
    });
    return formData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi0yLWZvcm0tZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2h0dHAtZm9ybS1kYXRhLWNsaWVudC9zcmMvbGliL3V0aWxzL2pzb24tMi1mb3JtLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUdsQzs7OztHQUlHO0FBR0gsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsR0FBTSxFQUNOLFVBQWlDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTtJQUV2RCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxLQUFLLEdBQUksR0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksS0FBSyxZQUFZLElBQUksRUFBRztZQUMxQixRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqQzthQUFNLElBQUksS0FBSyxZQUFZLE1BQU0sRUFBRTtZQUNsQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN0RDthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQy9DLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxHQUFHLFlBQVksSUFBSSxFQUFFO29CQUN2QixRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0wsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDaEQ7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU0sSUFBSyxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDckMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNMLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2JWTSB9IGZyb20gJy4uL2NsYXNzJztcbmltcG9ydCB7IEZvcm1EYXRhUGFyc2VyT3B0aW9ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG4vKipcbiAqIENvbnZpZXJ0ZSB1biBvYmpldG8gZW4gRm9ybURhdGFcbiAqIEBwYXJhbSBvYmogT2JqZXRvIEpzb25cbiAqIEByZXR1cm5zIE9iamV0byBGb3JtRGF0YSBjb24gbGFzIHByb3BpZWRhZGVzIGRlbCBvYmpldG8gSlNPTlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzb24yRm9ybURhdGE8VCA9IGFueT4oXG4gIG9iajogVCxcbiAgb3B0aW9uczogRm9ybURhdGFQYXJzZXJPcHRpb25zID0geyBibG9iUHJlZml4OiAnZmlsZScgfSxcbik6IEZvcm1EYXRhIHtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgT2JqZWN0LmtleXMob2JqIGFzIGFueSkuZm9yRWFjaCgoaykgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gKG9iaiBhcyBhbnkpW2tdO1xuICAgIGNvbnN0IGJsb2JLZXkgPSBvcHRpb25zLmJsb2JQcmVmaXggPyBgJHtvcHRpb25zLmJsb2JQcmVmaXh9XyR7a31gIDogaztcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCbG9iICkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKGJsb2JLZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQmxvYlZNKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoYmxvYktleSwgdmFsdWUuYmxvYiwgdmFsdWUuZmlsZW5hbWUpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2YWwpID0+IHtcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoYmxvYktleSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoYCR7a31bXWAsIEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoaywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoaywgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZm9ybURhdGE7XG59XG4iXX0=