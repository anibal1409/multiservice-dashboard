{"version":3,"file":"error-handler.mjs","sources":["../../../projects/error-handler/src/lib/alert-service/alert-service.service.ts","../../../projects/error-handler/src/lib/consts/error.consts.ts","../../../projects/error-handler/src/lib/error-parser/error-parser.service.ts","../../../projects/error-handler/src/lib/error-handler.service.ts","../../../projects/error-handler/src/lib/error-handler.module.ts","../../../projects/error-handler/src/error-handler.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AlertServiceService {\n  constructor() {}\n\n  error(msg: string): void {\n    window.alert(msg);\n  }\n}\n","export const AlertServiceKey = 'ALERT_SERVICE_KEY';\n/** Nombre del método en el servicio que lanza la alerta */\nexport const AlertMethotKey = 'ALERT_METHOD_KEY';\n/** Configuración del servicios de manejo de errores */\nexport const ErrorHandlerConfigKey = 'ERROR_HANDLER_CONFIG_KEY';\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nexport enum ErrorSource {\n  Client = 'CLIENT',\n  Server = 'SERVER',\n}\n\nexport interface CustomError extends Error {\n  path: string;\n  statusCode: number;\n  /** Código interno de la aplicación */\n  code?: string;\n  timestamp: Date;\n  /** Provee más detalles del error,( Traducido) */\n  description?: string;\n}\n\nexport interface ParsedError {\n  source: ErrorSource;\n  error: any;\n  message?: string;\n}\n\n/**\n * Da formato a los errores dependiendo de su origen (Cliente / servidor)\n */\n@Injectable()\nexport class ErrorParserService {\n  constructor() {}\n\n  getClientMessage(error: Error): string {\n    if (!navigator.onLine) {\n      return 'No Internet Connection';\n    }\n    return error?.message ? error?.message : error?.toString();\n  }\n\n  getServerMessage(error: CustomError): string {\n    let message = 'UNKNOW_SERVER_ERROR';\n    if (error.code || error.statusCode) {\n      message = error.description || error.message || message;\n    }\n    return message;\n  }\n\n  /**\n   * Indica la fuente del error: HTTP ó una acción del\n   * lado del cliente\n   */\n  getErrorAndSource(error: any): ParsedError {\n    let source = ErrorSource.Client;\n    let unwrappedError = error;\n    let message = error?.message;\n    if (error instanceof HttpErrorResponse) {\n      source = ErrorSource.Server;\n      unwrappedError = error.error;\n      message = this.getServerMessage(unwrappedError);\n    } else if (error?.rejection instanceof HttpErrorResponse) {\n      source = ErrorSource.Server;\n      unwrappedError = error?.rejection?.error;\n      message = this.getClientMessage(unwrappedError);\n    }\n    return {\n      source,\n      error: unwrappedError,\n    };\n  }\n\n  getMessage(error: Error | HttpErrorResponse): string {\n    const { source, error: ex } = this.getErrorAndSource(error);\n    const parsedError =\n      ErrorSource.Server === source\n        ? this.getServerMessage(ex)\n        : this.getClientMessage(ex);\n    return parsedError || error?.message;\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport {\n  ErrorHandler,\n  Inject,\n  Injectable,\n  Optional,\n} from '@angular/core';\n\nimport {\n  LoggerConfig,\n  LoggerConfigKey,\n  LoggerService,\n} from 'logger';\n\nimport {\n  AlertMethotKey,\n  AlertServiceKey,\n  ErrorHandlerConfigKey,\n} from './consts';\nimport {\n  ErrorParserService,\n  ErrorSource,\n} from './error-parser';\nimport { ErrorHandlerConfig } from './interfaces';\n\n@Injectable()\nexport class ErrorHandlerService implements ErrorHandler {\n  private config: ErrorHandlerConfig = {\n    alertClientErrors: false,\n  };\n\n  constructor(\n    private errorParserService: ErrorParserService,\n    private loggerService: LoggerService,\n    @Optional()\n    @Inject(ErrorHandlerConfigKey)\n    private configOptions: ErrorHandlerConfig,\n    @Optional() @Inject(AlertServiceKey) private alertSevice: any,\n    @Optional()\n    @Inject(AlertMethotKey)\n    private alertMethodName: string = 'error',\n    @Optional()\n    @Inject(LoggerConfigKey)\n    private loggerConfig: LoggerConfig\n  ) {\n    this.config = Object.assign(this.config, configOptions);\n  }\n\n  handleError(error: Error | HttpErrorResponse): void {\n    const parsedError = this.errorParserService.getErrorAndSource(error);\n    const message = this.errorParserService.getMessage(error);\n    if (\n      parsedError.source === ErrorSource.Server ||\n      (this.config.alertClientErrors &&\n        parsedError.source === ErrorSource.Client && parsedError?.error?.code !== -100)\n    ) {\n      this.alertSevice[this.alertMethodName](message);\n    }\n    this.loggerService.reportError(parsedError as any, this.loggerConfig);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  forwardRef,\n  ModuleWithProviders,\n  NgModule,\n} from '@angular/core';\n\nimport {\n  LoggerConfigKey,\n  LoggerModule,\n} from 'logger';\n\nimport { AlertServiceService } from './alert-service';\nimport {\n  AlertMethotKey,\n  AlertServiceKey,\n  ErrorHandlerConfigKey,\n} from './consts';\nimport { ErrorHandlerService } from './error-handler.service';\nimport { ErrorParserService } from './error-parser';\nimport { ErrorHandlerConfig } from './interfaces';\n\n/**\n * Módulo manejador de errores\n */\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, LoggerModule],\n  providers: [ErrorHandlerService, ErrorParserService, AlertServiceService],\n})\nexport class ErrorHandlerModule {\n  static forRoot<T>(\n    config?: ErrorHandlerConfig<T>\n  ): ModuleWithProviders<ErrorHandlerModule> {\n    return {\n      ngModule: ErrorHandlerModule,\n      providers: [\n        {\n          provide: ErrorHandlerConfigKey,\n          useValue: config,\n        },\n        {\n          provide: AlertServiceKey,\n          useExisting:\n            forwardRef(() => config?.alertService) || AlertServiceService,\n        },\n        {\n          provide: AlertMethotKey,\n          useValue: config?.alertMethodName,\n        },\n        {\n          provide: LoggerConfigKey,\n          useValue: config?.loggerConfig || {\n            allowConsole: true,\n          },\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}