{"version":3,"file":"toast.mjs","sources":["../../../projects/toast/src/lib/options-token.ts","../../../projects/toast/src/lib/toast.service.ts","../../../projects/toast/src/lib/toast.module.ts","../../../projects/toast/src/toast.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const TOAST_OPTIONS = new InjectionToken('toast.options');\n","import {\n  Inject,\n  Injectable,\n  Optional,\n} from '@angular/core';\n\nimport * as toastr from 'toastr';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { TOAST_OPTIONS } from './options-token';\n\n@Injectable()\nexport class ToastService {\n  constructor(\n    @Optional()\n    @Inject(TOAST_OPTIONS)\n    private options = { preventDuplicates: true },\n    private translateService: TranslateService\n  ) {\n    Object.assign(toastr.options, this.options);\n  }\n\n  error(message: string): void {\n    toastr.error(this.translateService.instant(message));\n  }\n\n  warning(message: string): void {\n    toastr.warning(this.translateService.instant(message));\n  }\n\n  success(message: string): void {\n    toastr.success(this.translateService.instant(message));\n  }\n\n  info(message: string): void {\n    toastr.info(this.translateService.instant(message));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ModuleWithProviders,\n  NgModule,\n} from '@angular/core';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { TOAST_OPTIONS } from './options-token';\nimport { ToastService } from './toast.service';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, TranslateModule.forRoot()],\n  providers: [ToastService],\n})\nexport class ToastModule {\n  static forRoot(options?: any): ModuleWithProviders<ToastModule> {\n    return {\n      ngModule: ToastModule,\n      providers: [\n        {\n          provide: TOAST_OPTIONS,\n          useValue: options,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;MAEa,aAAa,GAAG,IAAI,cAAc,CAAC,eAAe;;MCWlD,YAAY,CAAA;AACvB,IAAA,WAAA,CAGU,UAAU,EAAE,iBAAiB,EAAE,IAAI,EAAE,EACrC,gBAAkC,EAAA;QADlC,IAAO,CAAA,OAAA,GAAP,OAAO,CAA8B;QACrC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;QAE1C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7C;AAED,IAAA,KAAK,CAAC,OAAe,EAAA;AACnB,QAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;KACtD;AAED,IAAA,OAAO,CAAC,OAAe,EAAA;AACrB,QAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;KACxD;AAED,IAAA,OAAO,CAAC,OAAe,EAAA;AACrB,QAAA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;KACxD;AAED,IAAA,IAAI,CAAC,OAAe,EAAA;AAClB,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;KACrD;AAxBU,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,kBAGb,aAAa,EAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA,EAAA;mHAHZ,YAAY,EAAA,CAAA,CAAA,EAAA;;4FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBADxB,UAAU;;0BAGN,QAAQ;;0BACR,MAAM;2BAAC,aAAa,CAAA;;;MCAZ,WAAW,CAAA;IACtB,OAAO,OAAO,CAAC,OAAa,EAAA;QAC1B,OAAO;AACL,YAAA,QAAQ,EAAE,WAAW;AACrB,YAAA,SAAS,EAAE;AACT,gBAAA;AACE,oBAAA,OAAO,EAAE,aAAa;AACtB,oBAAA,QAAQ,EAAE,OAAO;AAClB,iBAAA;AACF,aAAA;SACF,CAAC;KACH;+GAXU,WAAW,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA,EAAA;AAAX,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAW,YAHZ,YAAY,EAAA,EAAA,CAAA,eAAA,CAAA,EAAA,CAAA,CAAA,EAAA;gHAGX,WAAW,EAAA,SAAA,EAFX,CAAC,YAAY,CAAC,EAAA,OAAA,EAAA,CADf,YAAY,EAAE,eAAe,CAAC,OAAO,EAAE,CAAA,EAAA,CAAA,CAAA,EAAA;;4FAGtC,WAAW,EAAA,UAAA,EAAA,CAAA;kBALvB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC,OAAO,EAAE,CAAC;oBAClD,SAAS,EAAE,CAAC,YAAY,CAAC;AAC1B,iBAAA,CAAA;;;ACfD;;AAEG;;;;"}